{"ast":null,"code":"var _jsxFileName = \"/home/patri/Escritorio/adalab/ejercicios-de-adalab/modulo 3/modulo-3-leccion-03-4-arrays-ejercicio-to-do/src/components/App.js\",\n    _s = $RefreshSig$();\n\n//RECORDATORIO: los inputs siempre tienen que estar contralados por onChange y value\nimport localStorage from '../services/localstorage';\nimport '../styles/App.scss';\nimport { useEffect, useState } from 'react';\nimport originalData from '../data/tasks.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [filterTask, setFilterTask] = useState(''); //esta variable de estado se crea para el input de filtrado\n\n  const [newTask, setNewTask] = useState(''); // esta variable de estado se crea para ir añadiendo las nuevas tareas del input\n\n  const [data, setData] = useState(localStorage.get('data', originalData)); //esta variable es para nuestra lista de tareas\n\n  useEffect(() => {\n    localStorage.set('data', originalData);\n  }, [originalData]); // En vez de leer la propiedad name leemos la propiedad data y su valor por defecto es un objeto vacío: ls.get('data', {})\n  // Del objeto (vacío o relleno que nos devuelve ls.get) obtenemos la propiedad name: ls.get('data', {}).name\n  // Si la propiedad name existe la usamos, si no, usamos un string vacío: ls.get('data', {}).name || ''\n\n  const [name, setName] = useState(ls.get('data', {}).name || ''); // RENDERIZAR TITULO Y LISTA DE TAREAS----------------------------------------\n  //NOTA: el ternario lo dejo con === true para verlo bien como ejemplo pero es redundante, no hay que ponerlo\n\n  const renderTitle = text => /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 33\n  }, this);\n\n  const renderTasks = () => {\n    return data.filter(eachTask => {\n      return eachTask.task.toLocaleLowerCase().includes(filterTask.toLocaleLowerCase());\n    }).map((eachTask, id) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: eachTask.completed === true ? 'paint' : '',\n        children: eachTask.task\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this);\n    });\n  }; //-------------------------------------------------------------------\n  //AÑADIR TAREAS NUEVAS A LA LISTA: crear variable de estado, y crear nuevo objeto con el spread operator. Llamar a la funcion de la variable de estado y pasarle como parametros el spread y el nuevo objeto.\n\n\n  const handleChangeNew = ev => {\n    setNewTask(ev.currentTarget.value);\n  };\n\n  const handleClickSave = () => {\n    const newObjet = {\n      id: data.length + 1,\n      task: newTask,\n      completed: false\n    };\n    setData([...data, newObjet]);\n    setNewTask('');\n  }; //-------------------------------------------------------------------\n  //FILTRAR\n\n\n  const handleChangeFilter = ev => {\n    setFilterTask(ev.currentTarget.value);\n  }; //para hacer el filtrado sería= data.filter ( (eachdData)=> eachData.task.includes(filteredTask) ) y esto se incluye en la funcion de renderTasks.Le añado que convierta las mayusculas.\n  //-------------------------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        onSubmit: ev => ev.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Filtrar por nombre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"filterTask\",\n          id: \"filterTask\",\n          onChange: handleChangeFilter,\n          value: filterTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), renderTitle('Mi lista de tareas')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: renderTasks()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: ev => ev.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newTask\",\n        id: \"newTask\",\n        onChange: handleChangeNew,\n        value: newTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClickSave,\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cPFXRtbs14KvEOZ+LTl8kMnwIXE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/patri/Escritorio/adalab/ejercicios-de-adalab/modulo 3/modulo-3-leccion-03-4-arrays-ejercicio-to-do/src/components/App.js"],"names":["localStorage","useEffect","useState","originalData","App","filterTask","setFilterTask","newTask","setNewTask","data","setData","get","set","name","setName","ls","renderTitle","text","renderTasks","filter","eachTask","task","toLocaleLowerCase","includes","map","id","completed","handleChangeNew","ev","currentTarget","value","handleClickSave","newObjet","length","handleChangeFilter","preventDefault"],"mappings":"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","sourcesContent":["//RECORDATORIO: los inputs siempre tienen que estar contralados por onChange y value\nimport localStorage from '../services/localstorage';\nimport '../styles/App.scss';\nimport { useEffect,useState } from 'react';\nimport originalData from '../data/tasks.json';\n\nfunction App() {\n  const [filterTask, setFilterTask] = useState(''); //esta variable de estado se crea para el input de filtrado\n  const [newTask, setNewTask] = useState(''); // esta variable de estado se crea para ir añadiendo las nuevas tareas del input\n  const [data, setData] = useState(localStorage.get('data', originalData)); //esta variable es para nuestra lista de tareas\n\nuseEffect(()=>{\n  localStorage.set('data',originalData);\n},[originalData]);\n\n // En vez de leer la propiedad name leemos la propiedad data y su valor por defecto es un objeto vacío: ls.get('data', {})\n  // Del objeto (vacío o relleno que nos devuelve ls.get) obtenemos la propiedad name: ls.get('data', {}).name\n  // Si la propiedad name existe la usamos, si no, usamos un string vacío: ls.get('data', {}).name || ''\n  const [name, setName] = useState(ls.get('data', {}).name || '');\n\n  // RENDERIZAR TITULO Y LISTA DE TAREAS----------------------------------------\n\n  //NOTA: el ternario lo dejo con === true para verlo bien como ejemplo pero es redundante, no hay que ponerlo\n  const renderTitle = (text) => <h1>{text}</h1>;\n\n  const renderTasks = () => {\n   \n    return data\n      .filter((eachTask) => {\n        return eachTask.task\n          .toLocaleLowerCase()\n          .includes(filterTask.toLocaleLowerCase());\n      })\n      .map((eachTask, id) => {\n        return (\n          <li key={id} className={eachTask.completed === true ? 'paint' : ''}>\n            {eachTask.task}\n          </li>\n        );\n      });\n  };\n  //-------------------------------------------------------------------\n  //AÑADIR TAREAS NUEVAS A LA LISTA: crear variable de estado, y crear nuevo objeto con el spread operator. Llamar a la funcion de la variable de estado y pasarle como parametros el spread y el nuevo objeto.\n\n  const handleChangeNew = (ev) => {\n    setNewTask(ev.currentTarget.value);\n  };\n  const handleClickSave = () => {\n    const newObjet = {\n      id: data.length + 1,\n      task: newTask,\n      completed: false,\n    };\n\n    setData([...data, newObjet]);\n    setNewTask('');\n  };\n\n  //-------------------------------------------------------------------\n  //FILTRAR\n\n  const handleChangeFilter = (ev) => {\n    setFilterTask(ev.currentTarget.value);\n  };\n  //para hacer el filtrado sería= data.filter ( (eachdData)=> eachData.task.includes(filteredTask) ) y esto se incluye en la funcion de renderTasks.Le añado que convierta las mayusculas.\n\n  //-------------------------------------------------------------------\n\n  return (\n    <div>\n      <div className=\"title\">\n        <form action=\"\" onSubmit={(ev) => ev.preventDefault()}>\n          <label htmlFor=\"\">Filtrar por nombre</label>\n          <input\n            type=\"text\"\n            name=\"filterTask\"\n            id=\"filterTask\"\n            onChange={handleChangeFilter}\n            value={filterTask}\n          />\n        </form>\n        {renderTitle('Mi lista de tareas')}\n      </div>\n      <ol>{renderTasks()}</ol>\n      <form action=\"\" onSubmit={(ev) => ev.preventDefault()}>\n        <input\n          type=\"text\"\n          name=\"newTask\"\n          id=\"newTask\"\n          onChange={handleChangeNew}\n          value={newTask}\n        />\n        <button onClick={handleClickSave}>Guardar</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}